/**
 * @file
 * This header file declares the function to create one instance of the IDHUOperationalModes state machine.
 * The state machine is configured with a set of function pointers representing the non-default
 * actions and guards of the state machine. Some of these functions may also be declared in
 * this header file in accordance with the configuration of the state machine in the FW Profile
 * Editor. In the latter case, the user has to provide an implementation for these functions
 * in a user-supplied body file.
 *
 * This header file has been automatically generated by the FW Profile Editor.
 * The state machine created by this file is shown in the figure below.
 *
 * <b>Note for state Initial State</b>
 * After boot
 *
 * @image html IDHUOperationalModes.png
 *
 * @author FW Profile code generator version 6.0
 * @date Created on: Aug 6 2025 14:27:9
 */

/* Make sure to include this header file only once */
#ifndef OPERATIONAL_SM_H_
#define OPERATIONAL_SM_H_

/* FW Profile function definitions */
#include "FwSmConstants.h"
#include "FwSmSCreate.h"
#include "FwSmConfig.h"

/* State identifiers */
#define IDHUOperationalModes_CALIBRATION (1)		/**< The identifier of state CALIBRATION in State Machine IDHUOperationalModes */
#define IDHUOperationalModes_MEMORY_MANAGEMENT (2)		/**< The identifier of state MEMORY_MANAGEMENT in State Machine IDHUOperationalModes */
#define IDHUOperationalModes_OBSERVATION (3)		/**< The identifier of state OBSERVATION in State Machine IDHUOperationalModes */
#define IDHUOperationalModes_STANDBY (4)		/**< The identifier of state STANDBY in State Machine IDHUOperationalModes */
#define IDHUOperationalModes_TEST (5)		/**< The identifier of state TEST in State Machine IDHUOperationalModes */

/* The identifiers of transition commands (triggers) */
#define Execute (0) /**< The identifier of the Execute transition trigger */
#define GUARD_CALIB_TC (37)/**< The identifier of the GUARD_CALIB_TC transition trigger */
#define GUARD_OBS_TC (38)/**< The identifier of the GUARD_OBS_TC transition trigger */
#define GUARD_TEST_TC (39)/**< The identifier of the GUARD_TEST_TC transition trigger */
#define GUARD_STANDBY_TC (40)/**< The identifier of the GUARD_STANDBY_TC transition trigger */
#define GUARD_FDIR (41)/**< The identifier of the GUARD_FDIR transition trigger */
#define GUARD_MEM_MGT_TC (42)/**< The identifier of the GUARD_MEM_MGT_TC transition trigger */
#define GUARD_BOOT_TC (43)/**< The identifier of the GUARD_BOOT_TC transition trigger */

/**
 * Create a new state machine descriptor.
 * This interface creates the state machine descriptor statically.
 * It creates a single static instance of the state machine.
 * The function should only be called once.
 * If it is called several times, it always reconfigures and returns the same instance.
 * @param smData the pointer to the state machine data.
 * A value of NULL is legal (note that the default value of the pointer
 * to the state machine data when the state machine is created is NULL).
 * @return the pointer to the state machine descriptor
 */
FwSmDesc_t OperationalSmCreate(void* smData);

#endif /* OPERATIONAL_SM_H_ */
